/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Adam
 */

import java.awt.*;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class OtakuDBGUI extends JFrame {

    /**
     * Creates new form OtakuDBGUI
     */
    
    public OtakuDBGUI() throws ClassNotFoundException, SQLException {
        initComponents();
        display();
        fillComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public Connection getConnection()  throws ClassNotFoundException, SQLException {
        Connection con;
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        try {
        String connectionURL = "jdbc:sqlserver://localhost:1433;databaseName=OtakuDB;userName=sa;password=hi";
        con = DriverManager.getConnection(connectionURL);
            return con;
        } catch (Exception e) {
            return null;
        }
    }
    
    public boolean containedAnime(String s) throws ClassNotFoundException, SQLException {
        for(int i = 0; i < getAnimeList().size(); i++) {
            if (getAnimeList().get(i).getAnimeName().equals(s))
                return true;
        }
            return false;
    }
    
    public void fillComboBox() {
        try {
            String query = "SELECT * FROM ANIME";
            PreparedStatement pst = getConnection().prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            
            while (rs.next()) {
                AnimeComboBox.addItem(rs.getString("AnimeName"));
            }
        }
        catch(Exception e) {
            
        }
    }
    
    public ArrayList<Anime> getAnimeList() throws ClassNotFoundException, SQLException {
        ArrayList<Anime> animeList = new ArrayList<Anime>();
        Connection connection = getConnection();
        String selection = "SELECT * FROM ANIME";
        Statement st;
        ResultSet rs;
        
        try {
        st = connection.createStatement();
        rs = st.executeQuery(selection);
        Anime anime;
        while (rs.next()) {
            anime = new Anime(rs.getString("AnimeName"),rs.getString("Director"),rs.getString("Studio"),rs.getString("Writer"),
            rs.getString("StartDate"),rs.getString("EndDate"),rs.getInt("Episodes"),rs.getString("RelatedManga"));
            animeList.add(anime);
        }
        } catch(Exception e) {
            
        }
        
        return animeList;
    }
    
    public void display() throws ClassNotFoundException, SQLException{
        ArrayList<Anime> list = getAnimeList();
        DefaultTableModel model = (DefaultTableModel)AnimeTable.getModel();
        Object[] row = new Object[8];
        for (int a = 0; a < list.size(); a++) {
            row[0] = list.get(a).getAnimeName();
            row[1] = list.get(a).getDirector();
            row[2] = list.get(a).getStudio();
            row[3] = list.get(a).getWriter();
            row[4] = list.get(a).getStartDate();
            row[5] = list.get(a).getEndDate();
            row[6] = list.get(a).getEpisodes();
            row[7] = list.get(a).getRelatedManga();
            
            model.addRow(row);
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AnimeName = new javax.swing.JLabel();
        Director = new javax.swing.JLabel();
        Studio = new javax.swing.JLabel();
        Writer = new javax.swing.JLabel();
        StartDate = new javax.swing.JLabel();
        EndDate = new javax.swing.JLabel();
        Episodes = new javax.swing.JLabel();
        AnimeNameTextField = new javax.swing.JTextField();
        DirectorTextField = new javax.swing.JTextField();
        StudioTextField = new javax.swing.JTextField();
        WriterTextField = new javax.swing.JTextField();
        StartDateTextField = new javax.swing.JTextField();
        EndDateTextField = new javax.swing.JTextField();
        EpisodesTextField = new javax.swing.JTextField();
        InsertButton = new javax.swing.JButton();
        OtakuTitle = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AnimeTable = new javax.swing.JTable();
        RelatedManga = new javax.swing.JLabel();
        RelatedMangaTextField = new javax.swing.JTextField();
        AnimeComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OtakuDB");

        AnimeName.setText("AnimeName");
        AnimeName.setAutoscrolls(true);

        Director.setText("Director");

        Studio.setText("Studio");

        Writer.setText("Writer");

        StartDate.setText("StartDate");

        EndDate.setText("EndDate");

        Episodes.setText("Episodes");

        AnimeNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnimeNameTextFieldActionPerformed(evt);
            }
        });

        EpisodesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EpisodesTextFieldActionPerformed(evt);
            }
        });

        InsertButton.setText("Insert");
        InsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertButtonActionPerformed(evt);
            }
        });

        OtakuTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otakuDBJapan.png"))); // NOI18N

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        AnimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AnimeName", "Director", "Studio", "Writer", "StartDate", "EndDate", "Episodes", "RelatedManga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AnimeTable.getTableHeader().setReorderingAllowed(false);
        AnimeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AnimeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AnimeTable);

        RelatedManga.setText("RelatedManga");

        RelatedMangaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RelatedMangaTextFieldActionPerformed(evt);
            }
        });

        AnimeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anime" }));
        AnimeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnimeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AnimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OtakuTitle)
                .addGap(0, 217, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(364, 364, 364)
                        .addComponent(InsertButton)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateButton)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RelatedManga)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(AnimeName)
                                        .addComponent(Director)
                                        .addComponent(Studio)
                                        .addComponent(Writer)
                                        .addComponent(StartDate)
                                        .addComponent(EndDate)
                                        .addComponent(Episodes))
                                    .addGap(19, 19, 19)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(StartDateTextField)
                                        .addComponent(AnimeNameTextField)
                                        .addComponent(DirectorTextField)
                                        .addComponent(StudioTextField)
                                        .addComponent(WriterTextField)
                                        .addComponent(EndDateTextField)
                                        .addComponent(EpisodesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(RelatedMangaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(OtakuTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AnimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AnimeName)
                            .addComponent(AnimeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Director)
                            .addComponent(DirectorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Studio)
                            .addComponent(StudioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Writer)
                            .addComponent(WriterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StartDate)
                            .addComponent(StartDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EndDate)
                            .addComponent(EndDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Episodes)
                            .addComponent(EpisodesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RelatedMangaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RelatedManga)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InsertButton)
                    .addComponent(UpdateButton)
                    .addComponent(DeleteButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnimeNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnimeNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AnimeNameTextFieldActionPerformed

    private void EpisodesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EpisodesTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EpisodesTextFieldActionPerformed

    private void InsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertButtonActionPerformed
    
        
        String insertAnimeName;
        String insertDirector;
        String insertStudio;
        String insertWriter;
        String insertStartDate;
        String insertEndDate;
        int insertEpisodes;
        String insertRelatedManga;
        
        
        try {
            // TODO add your handling code here:
            JFrame frame = new JFrame();
            if(AnimeNameTextField.getText().equals("") || AnimeNameTextField.getText().equals("Anime")) {
                JOptionPane.showMessageDialog(frame,
                "Anime name can't be blank.",
                "Error",
            JOptionPane.ERROR_MESSAGE);
            }
            else if (containedAnime(AnimeNameTextField.getText())) {
                JOptionPane.showMessageDialog(frame, "The anime \"" +
                AnimeNameTextField.getText() + "\" already exists.",
                "Error",
            JOptionPane.ERROR_MESSAGE);
            } else{
            
            String AnimeNameTxt = AnimeNameTextField.getText();
            String AnimeDirector;
            String AnimeStudio;
            String AnimeWriter;
            String AnimeStartDate;
            String AnimeEndDate;
            String AnimeEpisodes;
            String AnimeRelatedManga;
            String AnimeRelatedMangaTemp;
            
            AnimeNameTxt = AnimeNameTxt.replaceAll("'","''");
            
            if(DirectorTextField.getText().equals("")) {
                AnimeDirector = "NULL";
            }
            else{
                AnimeDirector = "'" + DirectorTextField.getText() + "'";
            }
            if(StudioTextField.getText().equals("")) {
                AnimeStudio = "NULL";
            }
            else{
                AnimeStudio = "'" + StudioTextField.getText() + "'";
            }
            if(WriterTextField.getText().equals("")) {
                AnimeWriter = "NULL";
            }
            else{
                AnimeWriter = "'" + WriterTextField.getText() + "'";
            }
            if(StartDateTextField.getText().equals("")) {
                AnimeStartDate = "NULL";
            }
            else{
                AnimeStartDate = "'" + StartDateTextField.getText() + "'";
            }
            if(EndDateTextField.getText().equals("")) {
                AnimeEndDate = "NULL";
            }
            else{
                AnimeEndDate = "'" + EndDateTextField.getText() + "'";
            }
            if(EpisodesTextField.getText().equals("")) {
                AnimeEpisodes = "NULL";
            }
            else{
                AnimeEpisodes = EpisodesTextField.getText();
            }
            if(RelatedMangaTextField.getText().equals("")) {
                AnimeRelatedManga = "NULL";
            }
            else{
                AnimeRelatedMangaTemp = RelatedMangaTextField.getText();
                AnimeRelatedMangaTemp = AnimeRelatedMangaTemp.replaceAll("'","''");
                AnimeRelatedManga = "'" + AnimeRelatedMangaTemp + "'";
            }
            
            int AnimeEpisodesNum = Integer.parseInt(EpisodesTextField.getText());
            
            String query = ("INSERT INTO ANIME VALUES ('" + AnimeNameTxt + "'," + AnimeDirector + ","
                    + AnimeStudio + "," + AnimeWriter + "," + AnimeStartDate + "," + AnimeEndDate + "," + AnimeEpisodesNum + 
                    "," + AnimeRelatedManga + ");");
            
            Statement stmt = getConnection().createStatement();
            stmt.executeUpdate(query);
            DefaultTableModel model = (DefaultTableModel)AnimeTable.getModel();
            
            AnimeNameTxt = AnimeNameTxt.replaceAll("''","'");
            AnimeComboBox.addItem(AnimeNameTxt);
            AnimeComboBox.setSelectedItem(AnimeNameTxt);
            
            model.setRowCount(0);
            display();
            
            }
        }
          catch (SQLException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
          catch (NumberFormatException ex) {
              JFrame frame = new JFrame();
              JOptionPane.showMessageDialog(frame, "Please enter a valid number for episodes.",
                "Error",
            JOptionPane.ERROR_MESSAGE);
        }
            
            
    }//GEN-LAST:event_InsertButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        try {
            // TODO add your handling code here:
            String AnimeNameOldTxt = (String)AnimeComboBox.getSelectedItem();
            String AnimeNameNewTxt = AnimeNameTextField.getText();
            String AnimeNameNewTxtTemp = AnimeNameTextField.getText();
            String AnimeDirector;
            String AnimeStudio;
            String AnimeWriter;
            String AnimeStartDate;
            String AnimeEndDate;
            String AnimeEpisodes;
            String AnimeRelatedManga;
            String AnimeRelatedMangaTemp;
            int AnimeEpisodesNum;
            JFrame frame = new JFrame();
            
            if (AnimeNameOldTxt.equals("Anime")) {
                
                JOptionPane.showMessageDialog(frame,
                        "Please choose an anime to update.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else if(AnimeNameTextField.getText().equals("")) {
                JOptionPane.showMessageDialog(frame,
                        "Anime name can't be blank.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else if (containedAnime(AnimeNameTextField.getText())) {
                JOptionPane.showMessageDialog(frame, "The anime \"" +
                        AnimeNameTextField.getText() + "\" already exists.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
            else {
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to update the anime " + AnimeNameOldTxt + "?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) 
                {
                AnimeNameNewTxt = "'" +  AnimeNameNewTxt.replaceAll("'","''") + "'";
            
            if(DirectorTextField.getText().equals("")) {
                AnimeDirector = "NULL";
            }
            else{
                AnimeDirector = "'" + DirectorTextField.getText() + "'";
            }
            if(StudioTextField.getText().equals("")) {
                AnimeStudio = "NULL";
            }
            else{
                AnimeStudio = "'" + StudioTextField.getText() + "'";
            }
            if(WriterTextField.getText().equals("")) {
                AnimeWriter = "NULL";
            }
            else{
                AnimeWriter = "'" + WriterTextField.getText() + "'";
            }
            if(StartDateTextField.getText().equals("")) {
                AnimeStartDate = "NULL";
            }
            else{
                AnimeStartDate = "'" + StartDateTextField.getText() + "'";
            }
            if(EndDateTextField.getText().equals("")) {
                AnimeEndDate = "NULL";
            }
            else{
                AnimeEndDate = "'" + EndDateTextField.getText() + "'";
            }
            if(EpisodesTextField.getText().equals("")) {
                AnimeEpisodes = "NULL";
            }
            else{
                AnimeEpisodesNum = Integer.parseInt(EpisodesTextField.getText());
                AnimeEpisodes = EpisodesTextField.getText();
            }
            if(RelatedMangaTextField.getText().equals("")) {
                AnimeRelatedManga = "NULL";
            }
            else{
                AnimeRelatedMangaTemp = RelatedMangaTextField.getText();
                AnimeRelatedMangaTemp = AnimeRelatedMangaTemp.replaceAll("'","''");
                AnimeRelatedManga = "'" + AnimeRelatedMangaTemp + "'";
            }
            
            
            AnimeNameOldTxt = "'" + AnimeNameOldTxt.replaceAll("'","''") + "'";
            
            String query = ("UPDATE ANIME SET AnimeName = " + AnimeNameNewTxt + ", Director = " + AnimeDirector + ", Studio = "
                    + AnimeStudio + ", Writer = " + AnimeWriter + ", StartDate = " + AnimeStartDate + ", EndDate = "
                    + AnimeEndDate + ", Episodes = " + AnimeEpisodes + ", RelatedManga = " + AnimeRelatedManga + " WHERE "
                    + "AnimeName = " + AnimeNameOldTxt + ";");
            
            Statement stmt = getConnection().createStatement();
            stmt.executeUpdate(query);
            DefaultTableModel model = (DefaultTableModel)AnimeTable.getModel();
            model.setRowCount(0);
            
            DefaultComboBoxModel dm = (DefaultComboBoxModel)AnimeComboBox.getModel();
            dm.removeElementAt(AnimeComboBox.getSelectedIndex());
            dm.insertElementAt(AnimeNameNewTxtTemp, AnimeComboBox.getSelectedIndex());
            dm.setSelectedItem(AnimeNameNewTxtTemp);
            
            display();
                }
            else;
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void AnimeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AnimeTableMouseClicked
        try {
            // TODO add your handling code here:
            int row = AnimeTable.getSelectedRow();
            String AnimeNameTxt =(AnimeTable.getModel().getValueAt(row, 0)).toString();
            AnimeNameTxt = AnimeNameTxt.replaceAll("'","''");
            
            String query = "SELECT * FROM ANIME WHERE AnimeName = '"+AnimeNameTxt+"' ";
            PreparedStatement pst = getConnection().prepareStatement(query);
            
            ResultSet rs = pst.executeQuery();
            
            while(rs.next()) {
                AnimeNameTextField.setText(rs.getString("AnimeName"));
                DirectorTextField.setText(rs.getString("Director"));
                StudioTextField.setText(rs.getString("Studio"));
                WriterTextField.setText(rs.getString("Writer"));
                StartDateTextField.setText(rs.getString("StartDate"));
                EndDateTextField.setText(rs.getString("EndDate"));
                EpisodesTextField.setText(rs.getString("Episodes"));
                RelatedMangaTextField.setText(rs.getString("RelatedManga"));
            }
            
            pst.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AnimeTableMouseClicked

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        try {
            // TODO add your handling code here:
            
            String AnimeNameTxt = (String)AnimeComboBox.getSelectedItem();
            
            
            if (AnimeNameTxt.equals("Anime")) {
                JFrame frame = new JFrame();
                JOptionPane.showMessageDialog(frame,
                "Please choose an anime to delete.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            } else {
            
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the anime " + AnimeNameTxt + "?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
            
            AnimeNameTxt = AnimeNameTxt.replaceAll("'","''");
            
            
            
            String query = ("DELETE FROM ANIME WHERE AnimeName = '" + AnimeNameTxt +  "';");
            Statement stmt = getConnection().createStatement();
            stmt.executeUpdate(query);
            DefaultTableModel model = (DefaultTableModel)AnimeTable.getModel();
            model.setRowCount(0);
            AnimeComboBox.removeItemAt(AnimeComboBox.getSelectedIndex());
            AnimeComboBox.setSelectedItem("Anime");
            display();
            }
            else;
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
          catch (NumberFormatException ex) {
              JFrame frame = new JFrame();
              JOptionPane.showMessageDialog(frame, "Please enter a valid number for episodes.",
                "Error",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void RelatedMangaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelatedMangaTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RelatedMangaTextFieldActionPerformed

    private void AnimeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnimeComboBoxActionPerformed
        // TODO add your handling code here:
        
        String AnimeNameTxt = (String)AnimeComboBox.getSelectedItem();
        AnimeNameTxt = AnimeNameTxt.replaceAll("'","''");
        
        String query = "SELECT * FROM ANIME WHERE AnimeName='" + AnimeNameTxt + "'";
                
        try {
            
            if(AnimeComboBox.getSelectedItem().equals("Anime")) {
                AnimeNameTextField.setText("");
                DirectorTextField.setText("");
                StudioTextField.setText("");
                WriterTextField.setText("");
                StartDateTextField.setText("");
                EndDateTextField.setText("");
                EpisodesTextField.setText("");
                RelatedMangaTextField.setText("");
            } else {
            PreparedStatement pst = getConnection().prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            
            while(rs.next()) {
                AnimeNameTextField.setText(rs.getString("AnimeName"));
                DirectorTextField.setText(rs.getString("Director"));
                StudioTextField.setText(rs.getString("Studio"));
                WriterTextField.setText(rs.getString("Writer"));
                StartDateTextField.setText(rs.getString("StartDate"));
                EndDateTextField.setText(rs.getString("EndDate"));
                EpisodesTextField.setText(rs.getString("Episodes"));
                RelatedMangaTextField.setText(rs.getString("RelatedManga"));
                }
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OtakuDBGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
                
                /*AnimeNameTextField.setText(rs.getString("AnimeName"));
                DirectorTextField.setText(rs.getString("Director"));
                StudioTextField.setText(rs.getString("Studio"));
                WriterTextField.setText(rs.getString("Writer"));
                StartDateTextField.setText(rs.getString("StartDate"));
                EndDateTextField.setText(rs.getString("EndDate"));
                EpisodesTextField.setText(rs.getString("Episodes"));
                RelatedMangaTextField.setText(rs.getString("RelatedManga"));*/
    }//GEN-LAST:event_AnimeComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AnimeComboBox;
    private javax.swing.JLabel AnimeName;
    private javax.swing.JTextField AnimeNameTextField;
    private javax.swing.JTable AnimeTable;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JLabel Director;
    private javax.swing.JTextField DirectorTextField;
    private javax.swing.JLabel EndDate;
    private javax.swing.JTextField EndDateTextField;
    private javax.swing.JLabel Episodes;
    private javax.swing.JTextField EpisodesTextField;
    private javax.swing.JButton InsertButton;
    private javax.swing.JLabel OtakuTitle;
    private javax.swing.JLabel RelatedManga;
    private javax.swing.JTextField RelatedMangaTextField;
    private javax.swing.JLabel StartDate;
    private javax.swing.JTextField StartDateTextField;
    private javax.swing.JLabel Studio;
    private javax.swing.JTextField StudioTextField;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel Writer;
    private javax.swing.JTextField WriterTextField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
